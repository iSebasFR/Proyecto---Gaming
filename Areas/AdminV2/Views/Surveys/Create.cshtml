@using Proyecto_Gaming.Areas.AdminV2.ViewModels
@using Proyecto_Gaming.Models.Surveys
@model SurveyCreateViewModel

@{
    ViewData["Title"] = "Crear Encuesta";
}

<h1 class="text-white mb-4"><i class="fa-solid fa-square-poll-vertical me-2"></i>Crear encuesta</h1>

<form asp-action="Create" method="post">
    <div class="card bg-dark text-white mb-3">
        <div class="card-body">
            <div class="mb-3">
                <label class="form-label">Título</label>
                <input asp-for="Title" class="form-control" />
                <span class="text-danger" asp-validation-for="Title"></span>
            </div>

            <div class="mb-3">
                <label class="form-label">Descripción (opcional)</label>
                <textarea asp-for="Description" class="form-control" rows="2"></textarea>
            </div>

            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Inicio (UTC)</label>
                    <input asp-for="StartDateUtc" type="datetime-local" class="form-control" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Fin (UTC)</label>
                    <input asp-for="EndDateUtc" type="datetime-local" class="form-control" />
                    <span class="text-danger" asp-validation-for="EndDateUtc"></span>
                </div>
            </div>

            <div class="mt-3">
                <label class="form-label">Recompensa (Medalla)</label>
                <select asp-for="MedalId" class="form-select">
                    <option value="">(Sin medalla)</option>
                    @foreach (var m in Model.Medals)
                    {
                        <option value="@m.Id">@m.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>

    <div class="card bg-dark text-white">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span><i class="fa fa-question-circle me-2"></i>Preguntas</span>
            <button type="button" class="btn btn-sm btn-outline-primary" id="btnAddQuestion">
                <i class="fa fa-plus"></i> Agregar pregunta
            </button>
        </div>
        <div class="card-body" id="questionsContainer"></div>
    </div>

    <div class="mt-3">
        <button class="btn btn-primary" type="submit"><i class="fa fa-save me-1"></i> Guardar</button>
        <a asp-action="Index" class="btn btn-outline-secondary">Cancelar</a>
    </div>
</form>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />

    <script>
        const initial = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Questions));
        const qContainer = document.getElementById('questionsContainer');
        const btnAddQuestion = document.getElementById('btnAddQuestion');

        function questionHtml(qIndex, data) {
            let type = data?.type ?? 0;
            let text = data?.text ?? "";
            let options = data?.options ?? [{ text: "" }, { text: "" }];

            let optionsHtml = "";
            if (type == 0) {
                optionsHtml = `
                    <div class="mt-2 options">
                        <label class="form-label">Opciones</label>
                        <div class="vstack gap-2" data-optlist>
                            ${options.map((o, idx) => `
                                <div class="input-group">
                                    <input name="Questions[${qIndex}].Options[${idx}].Text" class="form-control" value="${o.text ?? ''}" placeholder="Opción..." />
                                    <button type="button" class="btn btn-outline-danger" onclick="removeOption(this)">X</button>
                                </div>
                            `).join("")}
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-primary mt-2" onclick="addOption(this, ${qIndex})">
                            <i class="fa fa-plus"></i> Agregar opción
                        </button>
                    </div>`;
            } else if (type == 1) {
                optionsHtml = `<div class="text-secondary mt-2">Se agregarán automáticamente "Sí" y "No".</div>`;
            } else {
                optionsHtml = `<div class="text-secondary mt-2">Respuesta abierta (sin opciones).</div>`;
            }

            return `
            <div class="border rounded p-3 mb-3 bg-black bg-opacity-25" data-question>
                <div class="d-flex justify-content-between">
                    <strong>Pregunta</strong>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeQuestion(this)">Eliminar</button>
                </div>
                <div class="mt-2">
                    <label class="form-label">Texto</label>
                    <input name="Questions[${qIndex}].Text" class="form-control" value="${text}" />
                </div>
                <div class="mt-2">
                    <label class="form-label">Tipo</label>
                    <select name="Questions[${qIndex}].Type" class="form-select" onchange="rerender()">
                        <option value="0" ${type==0?'selected':''}>Opción múltiple</option>
                        <option value="1" ${type==1?'selected':''}>Sí / No</option>
                        <option value="2" ${type==2?'selected':''}>Respuesta abierta</option>
                    </select>
                </div>
                ${optionsHtml}
            </div>`;
        }

        function renderAll() {
            const blocks = [...qContainer.querySelectorAll('[data-question]')];
            const data = blocks.map(b => {
                const text = b.querySelector('input[name$=".Text"]').value;
                const type = parseInt(b.querySelector('select[name$=".Type"]').value);
                let options = [];
                if (type === 0) {
                    options = [...b.querySelectorAll('[data-optlist] input')].map(i => ({ text: i.value }));
                }
                return { text, type, options };
            });
            qContainer.innerHTML = data.map((q, i) => questionHtml(i, q)).join("");
        }
        function rerender(){ renderAll(); }
        function addOption(btn, qIndex){
            const parent = btn.closest('[data-question]');
            const list = parent.querySelector('[data-optlist]');
            const idx = list.querySelectorAll('input').length;
            const row = document.createElement('div');
            row.className = 'input-group mt-2';
            row.innerHTML = `
                <input name="Questions[${qIndex}].Options[${idx}].Text" class="form-control" placeholder="Opción..." />
                <button type="button" class="btn btn-outline-danger" onclick="removeOption(this)">X</button>`;
            list.appendChild(row);
        }
        function removeOption(btn){ btn.closest('.input-group').remove(); }
        function removeQuestion(btn){ btn.closest('[data-question]').remove(); renderAll(); }

        btnAddQuestion.addEventListener('click', () => {
            const count = qContainer.querySelectorAll('[data-question]').length;
            qContainer.insertAdjacentHTML('beforeend', questionHtml(count, null));
        });

        qContainer.innerHTML = (initial?.length ? initial : [{}]).map((q, i) => questionHtml(i, q)).join("");
    </script>
}
